// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customers {
  userId        String  @id
  phoneNumber   String
  name          String
  instagram     String?
  streetAddress String?
  city          String?
  state         String?
  zipCode       String?
  Sales         Sales[]
}

model Products {
  productId String         @id @default(uuid())
  name      String
  Sales     Sales[]
  Purchases Purchases[]
  stock     ProductStock[]
}

model ProductStock {
  stockId   String   @id @default(uuid())
  product   Products @relation(fields: [productId], references: [productId])
  price     Float
  productId String
  size      Float
  quantity  Int
  Sales     Sales[]
}

model Sales {
  saleId     String    @id
  productId  String
  stockId    String
  userId     String
  timestamp  DateTime
  quantity   Int
  salesPrice Float
  product    Products  @relation(fields: [productId], references: [productId])
  customers  Customers @relation(fields: [userId], references: [userId])
  productStock ProductStock @relation(fields: [stockId], references: [stockId])
}

model Purchases {
  purchaseId String   @id
  productId  String
  timestamp  DateTime
  quantity   Int
  unitCost   Float
  totalCost  Float
  product    Products @relation(fields: [productId], references: [productId])
}

model Expenses {
  expenseId String   @id
  category  String
  amount    Float
  timestamp DateTime
}

model SalesSummary {
  salesSummaryId   String   @id
  totalValue       Float
  changePercentage Float?
  date             DateTime
}

model PurchaseSummary {
  purchaseSummaryId String   @id
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime
}

model ExpenseSummary {
  expenseSummaryId  String              @id
  totalExpenses     Float
  date              DateTime
  ExpenseByCategory ExpenseByCategory[]
}

model ExpenseByCategory {
  expenseByCategoryId String         @id
  expenseSummaryId    String
  date                DateTime
  category            String
  amount              BigInt
  expenseSummary      ExpenseSummary @relation(fields: [expenseSummaryId], references: [expenseSummaryId])
}
